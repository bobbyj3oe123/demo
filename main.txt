- find the difference between two commit points use
  - git diff "commit number" "commit number"
  - git diff dbcfae3 HEAD
    - if you want to use the p4merge tool use
    - git difftool "commit number" "commit number"
    - git difftool dbcfae3 HEAD

- if you want to see changes from current working directory which is master in this case against the head which is the last commit
  - git diff
  - git difftool

- branching
  - timeline of commits

- branch names are labels

- example of a branch different from the master refer to image 2

- types of merges
  - fast-forward
    - simplest case
    - no addition work is detected in the master branch
    - were going to pretend we never really switched away from master in order to make those updates
    - merge the for example a feature branch to the master as if no feature branch ever existed
      - so the feature branch is deleted
      - refer to image 3
  - automatic
    - non-conflicting merge detected
    - preverses both timelines
    - so both branches are kept
    - refer to image 4
  - manual
    - automatic merge not possible
    - conflicting merge state
    - changes saved in merge commit
    - all prior merge conflict need to be resolved before a merge commit occurs
    - refer to image 5

- head points to the last commit of that branch

- see all the branches you have git branch

- if you want to create a branch and switch to it use
  - git checkout -b 'name of the branch'
  - git checkout -b updates
  - unstage commits carry to the newly created branch

- if you want to see difference between branches than ids use
  - git diff 'branch name' 'branch name'
  - git diff updates master

- switch branches use
  - git checkout 'branch name'
  - git checkout master

- merge a branch to master branch
  - git merge "name of the branch"
  - git merge updates

- delete a branch use
  - git branch -d "branch name"
  - git branch -d updates

- causing a conflict is updating same part of the files on both branches
  - when conflic appears use git mergetool to solve the conflict by choosing one of the available options
  at the bottom of p4merge tool and saving it

- add to gitignore .org files

- mark this part of this repository by using git tags
  - delete a tag
    - git tag -d "tag name"
    - git tag -d mytag
  - see your tag names use
    - git tag --list
  - there are two types of tags
    - light weight tags where you can just give a name
      - git tag "tag name"
      - git tag mytag
    - annotated tags which means they have extra info associated with the tag
      - git tag -a "tag name" -m "Commit message"
      - git tag -a v1.0 -m "Release 1.0"

- saved work in progress use
  - git stash

- bring the saved work progress back and apply those changes
  - git stash pop

- if you want to change the head is pointing to use
  - it preverse the staging area and working directory
  - effectively backout of our changes, make minor changes, and commit where head is pointing too
  - git reset "id" --soft
  - git reset 554db32 --soft

- find out all the different actions taken when is this repository use
  - git reflog
